import './globals.css';
import type { Metadata, ResolvingMetadata } from 'next';
import * as React from 'react';
import { Inter } from 'next/font/google';
import { Providers } from './Providers';
import { dir } from 'i18next';
import Toolbar from '@mui/material/Toolbar';
import { useTranslation } from '../i18n';
import { DictionaryLang } from './api/types';
import TopBar from './components/TopBar';
import { colors } from './colors';

const languages = ['eng', 'rus', 'lez'];

export async function generateStaticParams() {
  return languages.map((lang) => ({ lang }));
}

const inter = Inter({ subsets: ['latin'] });

// export const metadata: Metadata = {
//   title: 'Gafargan dictionary',
//   description: 'Generated by create next app',
// };

export async function generateMetadata(
  props: RootLayoutProps,
  parent: ResolvingMetadata,
): Promise<Metadata> {
  // eslint-disable-next-line react-hooks/rules-of-hooks
  const { t } = await useTranslation(props.params.lang);
  return {
    title: t('meta.title'),
    description: t('meta.description'),
    // openGraph: {
    //   images: ['/some-specific-page-image.jpg', ...previousImages],
    // },
  };
}

type RootLayoutProps = {
  children: React.ReactNode;
  params: { lang: string };
  searchParams: { fromLang: string; toLang: string };
};

export default async function RootLayout(props: RootLayoutProps) {
  const {
    children,
    params: { lang },
    // searchParams,
  } = props;
  const { t } = await useTranslation(lang);
  console.log(t('languages', { returnObjects: true }));
  return (
    <html lang={lang} dir={dir(lang)}>
      <body className={inter.className} style={{ backgroundColor: colors.background }}>
        <TopBar
          langs={t('languages', { returnObjects: true }) as Record<DictionaryLang, string>}
          searchLabel={t('search')}
        />
        <Toolbar />
        <Providers>{children}</Providers>
      </body>
    </html>
  );
}
